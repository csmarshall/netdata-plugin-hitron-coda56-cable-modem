# Enhanced Netdata python.d.plugin configuration for Hitron CODA cable modem
# Version 2.1.0 - Millisecond Timeout Precision Edition
#
# Key Enhancement: Sub-second timeout control (0.25 = 250ms)
# Perfect for modems with P100 response times < 200ms
#
# Place this file in your Netdata python.d configuration directory:
# - Package install: /etc/netdata/python.d/hitron_coda.conf
# - Snap install: /var/snap/netdata/current/etc/netdata/python.d/hitron_coda.conf
# - Docker: Mount to /etc/netdata/python.d/hitron_coda.conf

# Global plugin settings
update_every: 60
priority: 60000
penalty: yes

# ------------------------------------------------------------------------------
# BASIC CONFIGURATION (Start Here)
# ------------------------------------------------------------------------------
localhost:
  name: 'hitron_coda'
  
  # === REQUIRED ===
  host: 'https://192.168.100.1'           # Your modem's IP address
  
  # === BASIC SETTINGS ===
  device_name: 'Hitron CODA Cable Modem'  # Display name in charts
  update_every: 60                        # Fast endpoint polling interval (seconds)
  
  # === ENHANCED TIMEOUT CONFIGURATION (NEW) ===
  # Sub-second precision: 0.25 = 250ms, 1.5 = 1500ms
  # Multiple formats supported: 0.5, "500ms", "0.5s"
  
  fast_endpoint_timeout: 1.2               # QAM/WAN/System endpoints (1200ms)
  ofdm_endpoint_timeout: 4.0               # DOCSIS 3.1 endpoints (4000ms)
  collection_timeout: 54                   # Total cycle timeout (54s, 90% of update_every)
  
  # === TIERED POLLING ===
  # Fast endpoints: Every cycle (60s)
  # OFDM endpoints: Every 5th cycle (300s)
  ofdm_poll_multiple: 5                    # Poll OFDM every N fast cycles
  
  # === COLLECTION MODE ===
  parallel_collection: false              # false=Serial (safe), true=Parallel (faster)
  
  # === OPTIONAL SETTINGS ===
  # max_retries: 4                         # Auto-calculated: collection_timeout ÷ max(timeouts)
  # inter_request_delay: 0.2               # Pause between serial requests (seconds)

# ------------------------------------------------------------------------------
# ULTRA-RESPONSIVE CONFIGURATION (For P100 < 200ms modems)
# ------------------------------------------------------------------------------
# ultra_responsive:
#   name: 'hitron_fast'
#   host: 'https://192.168.100.1'
#   device_name: 'Ultra-Fast Cable Modem'
#   
#   # Ultra-aggressive timeouts for high-performance modems
#   update_every: 45                       # More frequent fast polling
#   fast_endpoint_timeout: 0.25            # 250ms for critical endpoints
#   ofdm_endpoint_timeout: 1.0             # 1000ms for OFDM (still conservative)
#   collection_timeout: 40                 # Must complete quickly
#   
#   # Parallel mode for minimal latency
#   parallel_collection: true
#   ofdm_poll_multiple: 8                  # OFDM less frequently to reduce load

# ------------------------------------------------------------------------------
# AGGRESSIVE CONFIGURATION (For responsive modems)
# ------------------------------------------------------------------------------
# aggressive:
#   name: 'hitron_aggressive'
#   host: 'https://192.168.100.1'
#   
#   # Sub-second timeouts for good-performance modems
#   fast_endpoint_timeout: 0.5             # 500ms
#   ofdm_endpoint_timeout: 1.5             # 1500ms
#   collection_timeout: 54
#   
#   parallel_collection: true
#   ofdm_poll_multiple: 6

# ------------------------------------------------------------------------------
# CONSERVATIVE CONFIGURATION (For variable/unstable modems)
# ------------------------------------------------------------------------------
# conservative:
#   name: 'hitron_safe'
#   host: 'https://192.168.100.1'
#   
#   # Generous timeouts for stability
#   update_every: 90                       # Less frequent polling
#   fast_endpoint_timeout: 3.0             # 3000ms
#   ofdm_endpoint_timeout: 8.0             # 8000ms
#   collection_timeout: 80                 # 90% of 90s
#   
#   # Serial mode with delays for maximum compatibility
#   parallel_collection: false
#   inter_request_delay: 0.5               # 500ms between requests
#   ofdm_poll_multiple: 3                  # More frequent OFDM monitoring

# ------------------------------------------------------------------------------
# TIMEOUT FORMAT EXAMPLES
# ------------------------------------------------------------------------------
# 
# All of these are equivalent to 750 milliseconds:
# fast_endpoint_timeout: 0.75             # Decimal seconds (RECOMMENDED)
# fast_endpoint_timeout: "750ms"          # Explicit milliseconds
# fast_endpoint_timeout: "0.75s"          # Explicit seconds
# fast_endpoint_timeout: 0.750            # Float seconds
#
# All of these are equivalent to 2.5 seconds:
# ofdm_endpoint_timeout: 2.5              # Decimal seconds (RECOMMENDED)
# ofdm_endpoint_timeout: "2500ms"         # Explicit milliseconds
# ofdm_endpoint_timeout: "2.5s"           # Explicit seconds

# ------------------------------------------------------------------------------
# PERFORMANCE OPTIMIZATION GUIDE
# ------------------------------------------------------------------------------
#
# 1. MEASURE YOUR MODEM'S PERFORMANCE FIRST:
#    - Use simulator: python netdata_simulator.py --quick-test
#    - Look at P95/P99 response times in the results
#
# 2. SET TIMEOUTS BASED ON MEASUREMENTS:
#    - fast_endpoint_timeout = 3-4x your P95 response time
#    - ofdm_endpoint_timeout = 5-8x your P100 response time
#    - Example: P95=150ms → fast_timeout=0.5s, P100=400ms → ofdm_timeout=2.0s
#
# 3. START CONSERVATIVE, THEN OPTIMIZE:
#    - Begin with: fast=1.0s, ofdm=3.0s
#    - Monitor success rate for 24 hours
#    - If success rate >99%, reduce timeouts by 25%
#    - If success rate <95%, increase timeouts by 50%
#
# 4. COLLECTION MODE SELECTION:
#    - Serial (parallel_collection: false): Maximum compatibility, slower
#    - Parallel (parallel_collection: true): Faster, requires stable modem
#
# 5. OFDM POLLING FREQUENCY:
#    - ofdm_poll_multiple: 5 → OFDM every 5 minutes (conservative)
#    - ofdm_poll_multiple: 10 → OFDM every 10 minutes (aggressive)
#    - Higher values = less OFDM load, potentially more stable

# ------------------------------------------------------------------------------
# MONITORED ENDPOINTS
# ------------------------------------------------------------------------------
#
# FAST ENDPOINTS (polled every cycle):
# - dsinfo.asp         → Downstream QAM channels (DOCSIS 3.0)
# - usinfo.asp         → Upstream QAM channels (DOCSIS 3.0)  
# - getCmDocsisWan.asp → WAN IPv4/IPv6 status
# - getSysInfo.asp     → System uptime and info
#
# SLOW ENDPOINTS (polled every Nth cycle):
# - dsofdminfo.asp     → Downstream OFDM (DOCSIS 3.1)
# - usofdminfo.asp     → Upstream OFDM (DOCSIS 3.1)
#
# CHARTS GENERATED:
# - Plugin Health (success rate, response times, collection times)
# - System Status (WAN connectivity, uptime)
# - Signal Quality (power levels, SNR for all channels)
# - Error Rates (corrected/uncorrected errors)
# - Frequencies and Bandwidth
# - DOCSIS 3.1 OFDM metrics (when available)

# ------------------------------------------------------------------------------
# TROUBLESHOOTING
# ------------------------------------------------------------------------------
#
# LOW SUCCESS RATE (<95%):
# - Increase fast_endpoint_timeout and ofdm_endpoint_timeout
# - Switch to parallel_collection: false
# - Add inter_request_delay: 0.5
# - Increase ofdm_poll_multiple to reduce OFDM load
#
# COLLECTION TIMEOUTS:
# - Increase collection_timeout
# - Check serial timing: (4 * fast_timeout + 2 * ofdm_timeout) should be < collection_timeout
# - Consider parallel_collection: true
#
# MODEM INSTABILITY:
# - Increase ofdm_poll_multiple significantly (try 10-15)
# - Use conservative timeout values
# - Add substantial inter_request_delay
#
# NO DATA COLLECTED:
# - Check connectivity: curl -k https://192.168.100.1/data/getSysInfo.asp
# - Verify host IP address is correct
# - Check Netdata logs: journalctl -u netdata -f | grep hitron

# ------------------------------------------------------------------------------
# SIMULATOR TESTING COMMANDS
# ------------------------------------------------------------------------------
#
# Test your configuration before deploying to production:
#
# # Quick connectivity test
# python netdata_simulator.py --host https://192.168.100.1 --quick-test
#
# # Test your exact timeout settings
# python netdata_simulator.py --fast-endpoint-timeout 0.5 --ofdm-endpoint-timeout 1.5 --duration 300
#
# # Compare serial vs parallel
# python netdata_simulator.py --fast-endpoint-timeout 0.8 --serial --duration 180
# python netdata_simulator.py --fast-endpoint-timeout 0.8 --parallel --duration 180
#
# # Ultra-aggressive testing
# python netdata_simulator.py --fast-endpoint-timeout 0.25 --ofdm-endpoint-timeout 1.0 --parallel
#
# # Conservative stability test
# python netdata_simulator.py --fast-endpoint-timeout 2.0 --ofdm-endpoint-timeout 6.0 --serial --duration 600
