# Enhanced Netdata python.d.plugin configuration for Hitron CODA cable modem
# This file configures the comprehensive cable modem monitoring plugin with advanced collection modes
#
# Place this file in your Netdata python.d configuration directory:
# - Package install: /etc/netdata/python.d/hitron_coda.conf
# - Snap install: /var/snap/netdata/current/etc/netdata/python.d/hitron_coda.conf
# - Docker: Mount to /etc/netdata/python.d/hitron_coda.conf

# Global plugin settings
update_every: 60
priority: 60000
penalty: yes

# Enable detailed debug logging (set to 'no' for production)
# debug: yes

# ----------------------------------------------------------------------
# ENHANCED JOBS CONFIGURATION
# Each job represents a modem to monitor with advanced collection modes and timeout logic

# Primary modem configuration with enhanced features (CONSERVATIVE DEFAULT)
localhost:
  name: 'hitron_coda'
  
  # Basic Configuration
  host: 'https://192.168.100.1'        # Your modem's IP address
  device_name: 'Hitron CODA56 Cable Modem'  # Custom display name
  update_every: 60                     # Collection interval (seconds)
  
  # ENHANCED TIMEOUT CONFIGURATION
  # Two-tier timeout system for optimal performance and reliability
  
  # Per-endpoint timeout: How long to wait for each individual API call
  # Default: 4 seconds (good balance of speed and reliability)
  # Range: 3-20 seconds (lower = faster failure detection, higher = more patient)
  endpoint_timeout: 6                  # Conservative default for compatibility
  
  # Overall collection timeout: Maximum time for entire collection cycle
  # Default: 90% of update_every (auto-calculated)
  # Should be less than update_every to prevent overlapping collections
  collection_timeout: 54               # 90% of 60s = 54s
  
  # COLLECTION MODE CONFIGURATION
  # Serial collection is now the DEFAULT for maximum compatibility and safety
  # Set to true for better performance if your modem can handle concurrent requests
  parallel_collection: false           # Default: false (SERIAL mode - one request at a time)
  
  # INTER-REQUEST DELAY (Serial mode only)
  # Adds a pause between each endpoint request when in serial mode
  # Use this for extremely sensitive modems that can't handle rapid requests
  # Default: 0 (no delay), recommended: 0.5-2 seconds for problematic modems
  # inter_request_delay: 0              # Seconds to wait between endpoints (serial mode)
  
  # SMART RETRY CALCULATION
  # Retries are auto-calculated as: floor(collection_timeout / endpoint_timeout)
  # This ensures retries fit within the collection window
  # Auto-calculated: 54 / 6 = 9 retries maximum
  # You can override this if needed:
  # max_retries: 9

# ----------------------------------------------------------------------
# COLLECTION MODE EXAMPLES AND PERFORMANCE COMPARISONS

# Example 1: CONSERVATIVE SERIAL (Default - Maximum Safety)
# Best for: Legacy modems, first-time setup, sensitive environments
# conservative_serial:
#   name: 'hitron_conservative'
#   host: 'https://192.168.100.1'
#   device_name: 'Conservative Cable Modem'
#   update_every: 120                   # 2-minute intervals
#   parallel_collection: false          # SERIAL mode (one request at a time)
#   endpoint_timeout: 8                 # Patient timeout per endpoint
#   collection_timeout: 100             # 90% of 120s
#   inter_request_delay: 1              # 1-second pause between endpoints
#   max_retries: 12                     # Auto-calculated: 100/8 = 12
#   # Performance: ~54 seconds total (6 × (8s + 1s))
#   # Safety: Maximum - sequential requests with pauses

# Example 2: BALANCED PRODUCTION (Recommended for most users)
# Best for: Production environments, modern modems, standard monitoring
# production_balanced:
#   name: 'hitron_production'
#   host: 'https://192.168.100.1'
#   device_name: 'Production Internet Gateway'
#   update_every: 60                    # 1-minute intervals
#   parallel_collection: false          # SERIAL mode (safe default)
#   endpoint_timeout: 6                 # Standard timeout
#   collection_timeout: 54              # 90% of 60s
#   inter_request_delay: 0              # No delays needed for modern modems
#   max_retries: 9                      # Auto-calculated: 54/6 = 9
#   # Performance: ~36 seconds total (6 × 6s)
#   # Safety: High - reliable sequential processing

# Example 3: HIGH-PERFORMANCE PARALLEL (Speed optimized)
# Best for: Robust modems, frequent monitoring, multiple modem environments
# high_performance:
#   name: 'hitron_fast'
#   host: 'https://192.168.100.1'
#   device_name: 'High-Performance Cable Modem'
#   update_every: 30                    # 30-second intervals
#   parallel_collection: true           # PARALLEL mode for speed
#   endpoint_timeout: 4                 # Quick timeout per endpoint
#   collection_timeout: 25              # 90% of 30s
#   max_retries: 6                      # Auto-calculated: 25/4 = 6
#   # Performance: ~4-6 seconds total (all endpoints simultaneously)
#   # Safety: Moderate - concurrent requests may stress some modems

# Example 4: ULTRA-CONSERVATIVE (Maximum modem protection)
# Best for: Very old modems, unstable networks, debugging
# ultra_conservative:
#   name: 'hitron_ultra_safe'
#   host: 'https://192.168.100.1'
#   device_name: 'Ultra-Safe Legacy Modem'
#   update_every: 300                   # 5-minute intervals
#   parallel_collection: false          # SERIAL mode only
#   endpoint_timeout: 15                # Very patient timeout
#   collection_timeout: 250             # Plenty of time
#   inter_request_delay: 3              # 3-second pause between endpoints
#   max_retries: 1                      # Minimal retries to reduce load
#   # Performance: ~108 seconds total (6 × (15s + 3s))
#   # Safety: Maximum - one request at a time with long pauses

# Example 5: DEVELOPMENT/TESTING (Easy debugging)
# Best for: Plugin development, troubleshooting, configuration testing
# development:
#   name: 'hitron_test'
#   host: 'https://192.168.100.1'
#   device_name: 'Test Lab Modem'
#   update_every: 20                    # Frequent testing
#   parallel_collection: false          # SERIAL for easier debugging
#   endpoint_timeout: 3                 # Quick failure detection
#   collection_timeout: 18              # 90% of 20s
#   inter_request_delay: 1              # 1-second delays for observation
#   max_retries: 3                      # Manual override for faster feedback
#   # Performance: ~24 seconds total (6 × (3s + 1s))
#   # Safety: High - easy to debug with visible request timing 30s
#   parallel_collection: true
#   # max_retries auto-calculated: 25 / 3 = 8 retries

# Example: Conservative setup for slower/older modems
# conservative:
#   name: 'hitron_coda_slow'
#   host: 'https://192.168.100.1'
#   device_name: 'Legacy Cable Modem'
#   update_every: 90
#   endpoint_timeout: 8                 # Longer endpoint timeout
#   collection_timeout: 75              # 90% of 90s
#   parallel_collection: true           # Still use parallel
#   # max_retries auto-calculated: 75 / 8 = 9 retries

# Example: Serial mode for problematic modems (GUARANTEED one-at-a-time)
# ultra_conservative:
#   name: 'hitron_coda_serial'
#   host: 'https://192.168.100.1'
#   device_name: 'Ultra-Conservative Modem'
#   update_every: 180                   # 3 minutes between collections
#   endpoint_timeout: 15                # Very long timeout per endpoint
#   collection_timeout: 150             # Plenty of time for all endpoints
#   parallel_collection: false          # FORCE serial mode - ONE AT A TIME
#   inter_request_delay: 2              # 2-second pause between each endpoint
#   max_retries: 2                      # Minimal retries to reduce load
#   # This configuration GUARANTEES only one endpoint is ever queried at a time
#   # Total estimated time: 6 endpoints × (15s timeout + 2s delay) = ~102s maximum

# Example: Minimal serial mode (absolute minimum modem load)
# minimal_load:
#   name: 'hitron_coda_minimal'
#   host: 'https://192.168.100.1'
#   device_name: 'Minimal Load Modem'
#   update_every: 300                   # 5 minutes between collections
#   endpoint_timeout: 20                # Very patient timeout
#   collection_timeout: 200             # Ample time
#   parallel_collection: false          # SERIAL mode only
#   inter_request_delay: 5              # 5-second rest between endpoints
#   max_retries: 1                      # Single attempt only
#   # This is the most conservative possible configuration

# Example: Multiple modems with staggered timing
# main_modem:
#   name: 'hitron_coda_main'
#   host: 'https://192.168.100.1'
#   device_name: 'Living Room Internet'
#   update_every: 60
#   endpoint_timeout: 4
#   collection_timeout: 50              # Slightly less than default

# backup_modem:
#   name: 'hitron_coda_backup'
#   host: 'https://192.168.200.1'
#   device_name: 'Guest WiFi Modem'
#   update_every: 75                    # Offset timing to spread load
#   endpoint_timeout: 5
#   collection_timeout: 65

# ----------------------------------------------------------------------
# TIMEOUT TUNING GUIDE
#
# The enhanced plugin uses a two-tier timeout system:
#
# 1. ENDPOINT TIMEOUT (per API call):
#    - How long to wait for each individual modem API response
#    - Recommended: 3-6 seconds
#    - Too low: False timeouts on slow modems
#    - Too high: Slow failure detection
#
# 2. COLLECTION TIMEOUT (entire cycle):
#    - Maximum time for all endpoints combined
#    - Recommended: 85-95% of update_every
#    - Should always be less than update_every
#    - Prevents overlapping collection cycles
#
# 3. MAX RETRIES (auto-calculated):
#    - Formula: floor(collection_timeout / endpoint_timeout)
#    - Ensures retries fit within the collection window
#    - Can be manually overridden if needed
#
# ----------------------------------------------------------------------
# SERIAL MODE GUARANTEES
#
# When parallel_collection: false, the plugin provides these GUARANTEES:
#
# 1. STRICT SEQUENTIAL PROCESSING:
#    - Only ONE endpoint is queried at any given time
#    - No async requests, no threading, no parallelism whatsoever
#    - Each endpoint completes fully before the next begins
#
# 2. PREDICTABLE TIMING:
#    - Endpoints are processed in fixed order: dsinfo → dsofdminfo → usinfo → usofdminfo → getSysInfo → getLinkStatus
#    - Total time is sum of individual endpoint times
#    - With inter_request_delay, timing becomes: (endpoint_timeout + delay) × 6 endpoints
#
# 3. MINIMAL MODEM LOAD:
#    - Only one HTTP connection at a time
#    - Optional delays between requests reduce burst load
#    - Configurable retry limits prevent overwhelming slow modems
#
# 4. ABSOLUTE SAFETY:
#    - No risk of concurrent requests
#    - No resource contention
#    - Suitable for the most sensitive/problematic modems
#
# Example ultra-safe configuration:
# parallel_collection: false          # GUARANTEE: One request at a time
# endpoint_timeout: 20                 # Patient timeout per endpoint
# inter_request_delay: 3               # 3-second pause between endpoints  
# max_retries: 1                       # Minimal retries
# update_every: 300                    # 5-minute intervals
#
# This configuration ensures:
# - Maximum 20 seconds per endpoint
# - 3-second rest between endpoints
# - Only 1 retry attempt
# - Total worst case: (20s + 3s) × 6 = 138 seconds
# - Collection happens every 300 seconds (5 minutes)
# - Zero possibility of overlapping or concurrent requests
#
# SMART RETRY LOGIC:
# - Retries are now calculated dynamically
# - More retries for longer collection windows
# - Fewer retries for shorter windows
# - Exponential backoff prevents modem overload
# - Automatic timeout scaling

# ----------------------------------------------------------------------
# PERFORMANCE OPTIMIZATION EXAMPLES
#
# For fastest possible monitoring (high-end modems):
# update_every: 30
# endpoint_timeout: 3
# collection_timeout: 25
# parallel_collection: true
# Result: ~3-4 second collections every 30 seconds
#
# For maximum reliability (problematic networks):
# update_every: 120
# endpoint_timeout: 8
# collection_timeout: 100
# parallel_collection: true
# max_retries: 12
# Result: Very reliable with extensive retry logic
#
# For resource-constrained systems:
# update_every: 90
# endpoint_timeout: 5
# collection_timeout: 75
# parallel_collection: true
# Result: Balanced load with good reliability

# ----------------------------------------------------------------------
# TROUBLESHOOTING WITH ENHANCED FEATURES
#
# Low Success Rate (<90%):
# 1. Check plugin health chart for specific failure patterns
# 2. Increase endpoint_timeout (try 6-8 seconds)
# 3. Increase collection_timeout
# 4. Verify network connectivity
#
# High Response Times (>2000ms):
# 1. Check if modem is overloaded
# 2. Increase update_every interval
# 3. Consider modem firmware update
# 4. Monitor for network congestion
#
# Collection Timeouts:
# 1. Increase collection_timeout
# 2. Reduce endpoint_timeout (counterintuitive but allows more retries)
# 3. Check if parallel_collection should be disabled
#
# Overlapping Collections (in logs):
# 1. Ensure collection_timeout < update_every
# 2. Increase update_every interval
# 3. Reduce number of retries manually
#
# Memory/CPU Usage Issues:
# 1. Increase update_every to reduce frequency
# 2. Consider disabling parallel_collection
# 3. Reduce max_retries manually

# ----------------------------------------------------------------------
# NEW ENHANCED FEATURES (v1.2.0)
#
# ✅ PARALLEL collection by default (6x faster than serial)
# ✅ Smart two-tier timeout system (endpoint + collection)
# ✅ Dynamic retry calculation based on timeouts
# ✅ Enhanced async HTTP with aiohttp for better performance
# ✅ Improved error handling with exponential backoff
# ✅ Collection time monitoring in plugin health
# ✅ Configurable collection mode (parallel/serial)
# ✅ Better resource utilization and modem load management
# ✅ Automatic timeout optimization
# ✅ Enhanced logging for performance troubleshooting
#
# Performance improvements:
# - Typical collection time: 4-6 seconds (parallel) vs 24-36 seconds (serial)
# - Better handling of slow or unresponsive endpoints
# - Reduced modem load through intelligent retry logic
# - Automatic adaptation to network conditions
#
# Health metrics now include:
# 1. Success Rate: Percentage of successful requests
# 2. Response Time: Average endpoint response time (ms)  
# 3. Collection Time: Total time for complete collection cycle (ms)
# 4. Consecutive Failures: Current failure streak
# 5. Active Endpoints: Number of responding endpoints
#
# Configuration validation:
# - Plugin validates timeout relationships on startup
# - Warns about suboptimal configurations
# - Auto-calculates optimal retry counts
# - Provides performance recommendations in logs

# ----------------------------------------------------------------------
# MIGRATION FROM PREVIOUS VERSIONS
#
# If upgrading from v1.1.0 or earlier:
# 1. Remove old 'timeout' parameter (now split into endpoint_timeout/collection_timeout)
# 2. Add 'parallel_collection: true' to enable new parallel mode
# 3. Adjust endpoint_timeout based on your modem's performance
# 4. Let max_retries auto-calculate or tune manually
#
# Old configuration:
# timeout: 10
# max_retries: 3
#
# New enhanced configuration:
# endpoint_timeout: 4
# collection_timeout: 54  # 90% of update_every
# parallel_collection: true
# # max_retries: auto-calculated

# ----------------------------------------------------------------------
# ADVANCED CONFIGURATION SCENARIOS
#
# Scenario 1: Multiple modems in different locations
# office_main:
#   name: 'hitron_office_main'
#   host: 'https://10.0.1.1'
#   device_name: 'Office Main Internet'
#   update_every: 45                    # Staggered timing
#   endpoint_timeout: 4
#   collection_timeout: 40
#   parallel_collection: true
#
# office_backup:
#   name: 'hitron_office_backup'  
#   host: 'https://10.0.2.1'
#   device_name: 'Office Backup Line'
#   update_every: 75                    # Different timing
#   endpoint_timeout: 6                 # Slower backup connection
#   collection_timeout: 65
#   parallel_collection: true
#
# Scenario 2: Testing/development setup
# test_modem:
#   name: 'hitron_test'
#   host: 'https://192.168.100.1'
#   device_name: 'Test Lab Modem'
#   update_every: 30                    # Frequent testing
#   endpoint_timeout: 2                 # Aggressive timeouts
#   collection_timeout: 25
#   parallel_collection: true
#   max_retries: 5                      # Manual override for testing
#
# Scenario 3: High-availability monitoring
# production:
#   name: 'hitron_production'
#   host: 'https://192.168.100.1'
#   device_name: 'Production Internet Gateway'
#   update_every: 20                    # Frequent monitoring
#   endpoint_timeout: 3                 # Fast detection
#   collection_timeout: 18              # 90% of 20s
#   parallel_collection: true
#   # max_retries: auto-calculated to 6 (18/3=6)

# ----------------------------------------------------------------------
# ENDPOINT DETAILS
#
# The plugin collects from these 6 endpoints in parallel:
# 1. dsinfo.asp - Downstream QAM channels (31 channels)
# 2. dsofdminfo.asp - Downstream OFDM channels (DOCSIS 3.1)
# 3. usinfo.asp - Upstream QAM channels (5 channels)  
# 4. usofdminfo.asp - Upstream OFDM channels (DOCSIS 3.1)
# 5. getSysInfo.asp - System uptime and status
# 6. getLinkStatus.asp - Link speed information
#
# In PARALLEL mode:
# - All 6 endpoints are queried simultaneously
# - Total time ≈ slowest endpoint + overhead
# - Typical: 4-6 seconds for healthy modems
# - Maximum: endpoint_timeout + small overhead
#
# In SERIAL mode:
# - Endpoints queried one after another
# - Total time ≈ sum of all endpoint times
# - Typical: 24-36 seconds for healthy modems
# - Maximum: 6 × endpoint_timeout

# ----------------------------------------------------------------------
# MONITORING AND ALERTING
#
# The enhanced plugin provides detailed health monitoring:
#
# Plugin Health Chart shows:
# - Success Rate: >95% is excellent, >90% is good, <85% needs attention
# - Response Time: <1000ms excellent, <2000ms good, >3000ms slow
# - Collection Time: Should be well under collection_timeout
# - Consecutive Failures: >10 indicates persistent issues
# - Active Endpoints: Should be 5-6 for healthy modem
#
# Recommended alerts:
# - Success rate <90% for >5 minutes
# - Collection time >80% of collection_timeout
# - Consecutive failures >15
# - Active endpoints <4
#
# For Netdata health configuration, see:
# /etc/netdata/health.d/hitron_coda.conf

# ----------------------------------------------------------------------
# PERFORMANCE BENCHMARKS
#
# Typical performance on modern systems:
#
# PARALLEL mode (recommended):
# - Collection time: 3-6 seconds
# - CPU usage: Low burst during collection
# - Network requests: 6 simultaneous
# - Modem load: Moderate (brief)
# - Scalability: Excellent (multiple modems)
#
# SERIAL mode (fallback):
# - Collection time: 20-40 seconds  
# - CPU usage: Sustained moderate
# - Network requests: 6 sequential
# - Modem load: Extended moderate
# - Scalability: Poor (avoid multiple modems)
#
# Memory usage (both modes):
# - Base: ~2-5MB per modem instance
# - Peak: +1-2MB during collection
# - Persistent: ~3MB per modem
#
# Network usage per collection:
# - Request size: ~500 bytes per endpoint
# - Response size: ~2-8KB per endpoint
# - Total per cycle: ~20-50KB
# - Daily usage: ~50-200MB (depends on update_every)

# ----------------------------------------------------------------------
# TROUBLESHOOTING CHECKLIST
#
# Before changing configuration:
# □ Check plugin health chart in Netdata
# □ Review Netdata logs: journalctl -u netdata -f
# □ Test modem directly: curl -k https://192.168.100.1/data/dsinfo.asp
# □ Verify network connectivity and latency
# □ Check modem firmware version and health
#
# Common issues and solutions:
#
# Issue: Low success rate with parallel mode
# Solution: Increase endpoint_timeout to 6-8 seconds
#
# Issue: Collection timeouts frequently
# Solution: Increase collection_timeout or reduce max_retries
#
# Issue: Overlapping collections in logs
# Solution: Ensure collection_timeout < update_every
#
# Issue: High memory usage
# Solution: Increase update_every, reduce retries, or use serial mode
#
# Issue: Modem becomes unresponsive
# Solution: Increase update_every, reduce max_retries, check modem health
#
# Issue: Inconsistent performance
# Solution: Check network congestion, increase timeouts, monitor modem logs

# ----------------------------------------------------------------------
# SUPPORT AND DOCUMENTATION
#
# For additional help:
# - GitHub Issues: https://github.com/yourusername/netdata-hitron-plugin
# - Documentation: docs/ENHANCED_FEATURES.md
# - Performance Guide: docs/PERFORMANCE_TUNING.md
# - Troubleshooting: docs/TROUBLESHOOTING.md
#
# When reporting issues, include:
# - Plugin version and configuration
# - Modem model and firmware version
# - Netdata version and installation type
# - Output from plugin health chart
# - Relevant log entries with timestamps
# - Network environment details
