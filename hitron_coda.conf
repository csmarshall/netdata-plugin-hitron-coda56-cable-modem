# Enhanced Netdata python.d.plugin configuration for Hitron CODA cable modem
# Version 2.0.0 - Tiered Polling Edition
#
# This configuration enables intelligent two-tier polling for optimal stability:
# - Fast endpoints: Critical data (QAM channels, WAN status) polled frequently
# - Slow endpoints: OFDM channels polled less often to prevent modem instability
#
# Place this file in your Netdata python.d configuration directory:
# - Package install: /etc/netdata/python.d/hitron_coda.conf
# - Snap install: /var/snap/netdata/current/etc/netdata/python.d/hitron_coda.conf
# - Docker: Mount to /etc/netdata/python.d/hitron_coda.conf

# Global plugin settings
update_every: 60
priority: 60000
penalty: yes

# Enable detailed debug logging (set to 'no' for production)
# debug: yes

# ------------------------------------------------------------------------------
# TIERED POLLING CONFIGURATION JOBS
# Each job represents a modem with intelligent endpoint management

# ------------------------------------------------------------------------------
# PRODUCTION CONFIGURATION (Active - Recommended Default)
# Conservative settings with tiered polling for maximum stability
localhost:
  name: 'hitron_coda'
  
  # === BASIC CONFIGURATION ===
  host: 'https://192.168.100.1'           # REQUIRED: Your modem's IP address
  device_name: 'Hitron CODA Cable Modem'  # Custom display name for charts
  update_every: 60                        # Base polling interval for fast endpoints (seconds)

  # === TIERED POLLING CONFIGURATION ===
  # This is the key feature for improved stability
  
  # OFDM Poll Multiple: How often to poll OFDM endpoints relative to fast endpoints
  # Default: 5 (poll OFDM every 5th cycle)
  # Fast endpoints polled every 60s, OFDM polled every 300s (60 * 5)
  ofdm_poll_multiple: 5                    # Poll OFDM every 5 fast cycles (every 5 minutes)
  
  # Alternative: Set specific OFDM interval (overrides ofdm_poll_multiple)
  # ofdm_update_every: 300                 # Poll OFDM endpoints every 300 seconds
  
  # === COLLECTION MODE ===
  # Serial collection is DEFAULT for maximum compatibility
  parallel_collection: false              # false = Serial (safe), true = Parallel (faster)
  
  # === TWO-TIER TIMEOUT CONFIGURATION ===
  # Separate timeouts for fast vs OFDM endpoints
  fast_endpoint_timeout: 3                # Timeout for fast endpoints (QAM, WAN, System) - can be aggressive
  ofdm_endpoint_timeout: 8                # Timeout for OFDM endpoints (DOCSIS 3.1) - need more patience
  collection_timeout: 54                  # Overall timeout for complete cycle (90% of update_every)
  
  # === RETRY CONFIGURATION ===
  # Auto-calculated based on the longer of the two endpoint timeouts
  # max_retries: 6                        # Override auto-calculation if needed
  
  # === SERIAL MODE FINE-TUNING ===
  # Add delays between requests for ultra-sensitive modems
  # inter_request_delay: 0.5              # Seconds to pause between endpoints (serial mode only)

# ------------------------------------------------------------------------------
# ALTERNATIVE CONFIGURATIONS (Commented - Copy and modify as needed)
# ------------------------------------------------------------------------------

# HIGH-FREQUENCY MONITORING
# For modems that can handle more aggressive polling
# high_frequency:
#   name: 'hitron_coda_fast'
#   host: 'https://192.168.100.1'
#   device_name: 'Fast Monitoring Cable Modem'
#   
#   # Fast polling with tiered OFDM protection
#   update_every: 30                        # Fast endpoints every 30 seconds
#   ofdm_poll_multiple: 10                  # OFDM every 10th cycle (every 300 seconds)
#   
#   # Enable parallel for speed
#   parallel_collection: true               # Parallel mode for faster collection
#   endpoint_timeout: 6                     # Shorter timeout for responsiveness
#   collection_timeout: 27                  # 90% of 30s
#   
#   # Auto-calculated: 27 ÷ 6 = 4 retries

# ------------------------------------------------------------------------------
# ULTRA-CONSERVATIVE CONFIGURATION
# For problematic modems or unstable network conditions
# ultra_conservative:
#   name: 'hitron_coda_safe'
#   host: 'https://192.168.100.1'
#   device_name: 'Ultra-Safe Cable Modem'
#   
#   # Very gentle polling
#   update_every: 120                       # Fast endpoints every 2 minutes
#   ofdm_poll_multiple: 5                   # OFDM every 10 minutes (120 * 5 = 600s)
#   
#   # Maximum safety settings
#   parallel_collection: false             # Serial only
#   endpoint_timeout: 15                    # Very patient timeouts
#   collection_timeout: 108                 # 90% of 120s
#   inter_request_delay: 2                  # 2-second pause between requests
#   max_retries: 3                          # Limited retries to avoid overwhelming modem

# ------------------------------------------------------------------------------
# DEVELOPMENT/TESTING CONFIGURATION
# For plugin development and testing different polling strategies
# development:
#   name: 'hitron_coda_test'
#   host: 'https://192.168.100.1'
#   device_name: 'Test Lab Modem'
#   
#   # Frequent polling for testing
#   update_every: 20                        # Fast endpoints every 20 seconds
#   ofdm_poll_multiple: 3                   # OFDM every 60 seconds (for testing)
#   
#   # Testing settings
#   parallel_collection: false             # Serial for easier debugging
#   endpoint_timeout: 5                     # Quick failure detection
#   collection_timeout: 18                  # 90% of 20s
#   inter_request_delay: 1                  # Observable delays
#   max_retries: 2                          # Quick retries for testing

# ------------------------------------------------------------------------------
# MULTIPLE MODEM CONFIGURATION EXAMPLES (Commented)
# Example of monitoring multiple modems with staggered timing
# 
# To monitor multiple modems:
# 1. Copy one of the configurations above
# 2. Change the name (must be unique)
# 3. Change the host IP address
# 4. Optionally stagger update_every timing to avoid simultaneous polling
#
# main_modem:
#   name: 'hitron_main'
#   host: 'https://192.168.100.1'
#   device_name: 'Main Internet Connection'
#   update_every: 60
#   ofdm_poll_multiple: 5
#   parallel_collection: false
# 
# backup_modem:
#   name: 'hitron_backup'
#   host: 'https://192.168.200.1'
#   device_name: 'Backup Internet Connection'
#   update_every: 75                      # Staggered timing to avoid simultaneous polling
#   ofdm_poll_multiple: 4                 # Different OFDM schedule
#   parallel_collection: false

# ------------------------------------------------------------------------------
# TIERED POLLING EXPLANATION
#
# The plugin monitors 6 endpoints in two categories:
#
# FAST ENDPOINTS (polled every cycle):
# - dsinfo.asp        → Downstream QAM channels (31 channels) - Critical signal data
# - usinfo.asp        → Upstream QAM channels (5 channels) - Critical upload data
# - getCmDocsisWan.asp → WAN status (IPv4/IPv6) - Connection status
# - getViewInfo.asp   → System uptime - Basic health check
#
# SLOW ENDPOINTS (polled every Nth cycle):
# - dsofdminfo.asp    → Downstream OFDM (DOCSIS 3.1) - Can cause instability
# - usofdminfo.asp    → Upstream OFDM (DOCSIS 3.1) - Less critical, slower response
#
# POLLING SCHEDULE EXAMPLES:
#
# Example 1: update_every=60, ofdm_poll_multiple=5
# - Fast endpoints: Every 60 seconds
# - OFDM endpoints: Every 300 seconds (60 * 5)
# - Timeline: Fast@0s, Fast@60s, Fast@120s, Fast@180s, Fast@240s, ALL@300s...
#
# Example 2: update_every=30, ofdm_poll_multiple=10  
# - Fast endpoints: Every 30 seconds
# - OFDM endpoints: Every 300 seconds (30 * 10)
# - Timeline: Fast@0s, Fast@30s, Fast@60s... Fast@270s, ALL@300s...

# ------------------------------------------------------------------------------
# CONFIGURATION TUNING GUIDE
#
# START WITH: Use the default 'localhost' configuration
# MONITOR: Check plugin health chart for success rate and response times
# OPTIMIZE: Gradually adjust based on your modem's performance
#
# IF SUCCESS RATE < 95%:
# 1. Increase endpoint_timeout (try 10-15 seconds)
# 2. Increase ofdm_poll_multiple (try 8-10)
# 3. Add inter_request_delay (try 1-2 seconds)
# 4. Switch to ultra_conservative configuration
#
# IF COLLECTION TIME > 80% OF COLLECTION_TIMEOUT:
# 1. Increase collection_timeout
# 2. Enable parallel_collection (if modem supports it)
# 3. Reduce max_retries manually
#
# IF MODEM BECOMES UNRESPONSIVE:
# 1. Increase update_every interval
# 2. Increase ofdm_poll_multiple significantly
# 3. Add substantial inter_request_delay
# 4. Check modem firmware and health
#
# FOR MAXIMUM PERFORMANCE:
# 1. Start with high_frequency configuration
# 2. Enable parallel_collection
# 3. Monitor for 24+ hours before declaring stable
# 4. Gradually reduce timeouts if stable

# ------------------------------------------------------------------------------
# PERFORMANCE EXPECTATIONS
#
# CONSERVATIVE CONFIGURATION (localhost):
# - Fast endpoints: Every 60s (95% of data)
# - OFDM endpoints: Every 300s (5% of data, high-speed metrics)
# - Collection time: ~8-15 seconds (serial)
# - Modem load: Very low
# - Reliability: Maximum
#
# AGGRESSIVE CONFIGURATION (high_frequency):
# - Fast endpoints: Every 30s
# - OFDM endpoints: Every 300s  
# - Collection time: ~3-6 seconds (parallel)
# - Modem load: Moderate
# - Reliability: Good (if modem supports it)
#
# ULTRA-CONSERVATIVE (ultra_conservative):
# - Fast endpoints: Every 120s
# - OFDM endpoints: Every 600s
# - Collection time: ~15-25 seconds (serial with delays)
# - Modem load: Minimal
# - Reliability: Maximum (for problematic modems)

# ------------------------------------------------------------------------------
# ENDPOINT HEALTH MONITORING
#
# The plugin provides comprehensive health monitoring:
#
# Plugin Health Chart Metrics:
# - Success Rate: Percentage of successful endpoint calls (target: >95%)
# - Response Time: Average endpoint response time in ms (target: <2000ms)
# - Collection Time: Total cycle completion time in ms (target: <80% of collection_timeout)
# - Consecutive Failures: Current failure streak (target: <5)
# - Active Endpoints: Number of responding endpoints (target: 4-6)
#
# Chart Coverage:
# - 15 comprehensive charts covering all aspects of cable modem performance
# - Dynamic channel detection (supports 1-31 downstream, 1-8 upstream channels)
# - DOCSIS 3.1 OFDM monitoring for gigabit+ connections
# - Real-time error rate tracking for proactive issue detection

# ------------------------------------------------------------------------------
# TROUBLESHOOTING TIERED POLLING
#
# LOGS TO MONITOR:
# journalctl -u netdata -f | grep hitron
#
# COMMON LOG MESSAGES:
# "Cycle X (FAST): Polling 4 endpoints" → Normal fast cycle
# "Cycle X (FULL): Polling 6 endpoints" → Normal OFDM cycle
# "OFDM cycle X: polling ALL endpoints" → OFDM polling triggered
# "collection_timeout should be less than update_every" → Configuration warning
#
# DEBUGGING STEPS:
# 1. Check plugin health chart in Netdata dashboard
# 2. Verify modem responds: curl -k https://192.168.100.1/data/getViewInfo.asp
# 3. Test individual endpoints manually
# 4. Review configuration for timeout relationships
# 5. Monitor system resource usage during collection

# ------------------------------------------------------------------------------
# MIGRATION FROM VERSION 1.x
#
# NEW FEATURES IN 2.0:
# ✅ Tiered polling system for improved stability
# ✅ Smart OFDM endpoint management
# ✅ Enhanced plugin health monitoring
# ✅ Improved error handling and retry logic
# ✅ Better timeout relationship validation
# ✅ More granular configuration options
#
# CONFIGURATION CHANGES:
# OLD: Single update_every for all endpoints
# NEW: update_every for fast endpoints + ofdm_poll_multiple for OFDM scheduling
#
# OLD: Basic timeout configuration
# NEW: Two-tier timeout system (endpoint_timeout + collection_timeout)
#
# UPGRADE STEPS:
# 1. Backup existing configuration
# 2. Replace with new tiered polling configuration
# 3. Start with conservative settings
# 4. Monitor for 24+ hours before optimization
# 5. Gradually tune based on performance metrics

# ------------------------------------------------------------------------------
# SUPPORT AND DOCUMENTATION
#
# For additional help and advanced configuration:
# - Plugin health monitoring guide: Check Netdata dashboard
# - Performance tuning: Monitor success rates and response times
# - Stability testing: Use development configuration for testing
# - Multiple modem setup: Stagger polling intervals
#
# When reporting issues, include:
# - Full configuration (sanitized)
# - Plugin health chart screenshots
# - Netdata log excerpts with timestamps
# - Modem model and firmware version
# - Network environment details
